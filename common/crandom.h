#ifndef C_RANDOM_H
#define C_RANDOM_H

//****************************************************************************************************
//класс случайных чисел
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <math.h>

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объявления
//****************************************************************************************************
template <class type_t>
class CTensor;

//****************************************************************************************************
//класс случайных чисел
//****************************************************************************************************
template <class type_t>
class CRandom
{
 public:
  //-перечисления---------------------------------------------------------------------------------------
  //-структуры------------------------------------------------------------------------------------------
  //-константы------------------------------------------------------------------------------------------
 private:
  //-переменные-----------------------------------------------------------------------------------------
 public:
  //-конструктор----------------------------------------------------------------------------------------
  CRandom(void);
  //-деструктор-----------------------------------------------------------------------------------------
  ~CRandom();
 public:
  //-открытые функции-----------------------------------------------------------------------------------
  static type_t GetRandValue(type_t max_value);///<случайное число
  static double GetGaussRandValue(double MO,double sko);///<генератор случайных чисел с нормальным распределением
  static void SetRandomNormal(CTensor<type_t> &cTensor,double min=-1,double max=1);///<заполнить тензор случайными числами с нормальным распределением
 private:
  //-закрытые функции-----------------------------------------------------------------------------------
};

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
template <class type_t>
CRandom<type_t>::CRandom(void)
{
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
template <class type_t>
CRandom<type_t>::~CRandom()
{
}

//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//случайное число
//----------------------------------------------------------------------------------------------------
template<class type_t>
type_t CRandom<type_t>::GetRandValue(type_t max_value)
{
 return((static_cast<type_t>(rand())*max_value)/static_cast<type_t>(RAND_MAX));
}

//----------------------------------------------------------------------------------------------------
//генератор случайных чисел с нормальным распределением
//----------------------------------------------------------------------------------------------------
template<class type_t>
double CRandom<type_t>::GetGaussRandValue(double MO,double sko)
{
 double sum=0;
 double x;
 for(uint32_t n=0;n<28;n++) sum+=1.0*rand()/RAND_MAX;
 x=(sqrt(2.0)*(sko)*(sum-14.))/2.11233+MO;
 return(x);
}


//----------------------------------------------------------------------------------------------------
//заполнить тензор случайными числами с нормальным распределением
//----------------------------------------------------------------------------------------------------
template<class type_t>
void CRandom<type_t>::SetRandomNormal(CTensor<type_t> &cTensor,double min,double max)
{
 uint32_t size=cTensor.GetSizeX()*cTensor.GetSizeY()*cTensor.GetSizeZ();
 double average=(max+min)/2.0;
 double sigma=(average-min)/3.0;
 for(uint32_t w=0;w<cTensor.GetSizeW();w++)
 {
  for(uint32_t x=0;x<cTensor.GetSizeX();x++)
  {
   for(uint32_t y=0;y<cTensor.GetSizeY();y++)
   {
    for(uint32_t z=0;z<cTensor.GetSizeZ();z++)
    {
     type_t value=static_cast<type_t>(GetGaussRandValue(average,sigma));
     //есть вероятность (0.3%) что сгенерированное число выйдет за нужный нам диапазон
     while(value<min || value>max) value=GetGaussRandValue(average,sigma);//если это произошло генерируем новое число.
     cTensor.SetElement(w,z,y,x,value);
	}
   }
  }
 }
 cTensor.SetHostOnChange();
}

#endif
