//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "ccolormodel.h"
#include <math.h>

//****************************************************************************************************
//глобальные переменные
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CColorModel::CColorModel(void)
{ 
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CColorModel::~CColorModel()
{
}

//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//преобразовать ненормированный (r,g,b) в нормированный Lab
//----------------------------------------------------------------------------------------------------
void CColorModel::RGB2Lab(float r,float g,float b,float &ml,float &ma,float &mb)
{
 float t_fX;
 float t_fY;
 float t_fZ;
 
 float t_rf=(float)b/255.0f;
 float t_gf=(float)g/255.0f;
 float t_bf=(float)r/255.0f;
 
 if (t_rf>0.04045f) t_rf=exp((log((t_rf+0.055f)/1.055f)*2.4f));
               else t_rf=t_rf/12.92f;
 if (t_gf>0.04045f) t_gf=exp((log((t_gf+0.055f)/1.055f)*2.4f));
               else t_gf=t_gf/12.92f;
 if (t_bf>0.04045f) t_bf=exp((log((t_bf+0.055f)/1.055f)*2.4f));
               else t_bf=t_bf/12.92f;

 t_rf*=100.0f;
 t_gf*=100.0f;
 t_bf*=100.0f;

 float t_X=0.412453f*t_rf+0.357580f*t_gf+0.180423f*t_bf;
 float t_Y=0.212671f*t_rf+0.715160f*t_gf+0.072169f*t_bf;
 float t_Z=0.019334f*t_rf+0.119193f*t_gf+0.950227f*t_bf;
 
 t_X/=95.047f;
 t_Y/=100.0f;
 t_Z/=108.883f;

 if (t_X>0.008856f) t_fX=exp(log(t_X)/3.0f);
               else t_fX=((7.787f*t_X)+(16.0f/116.0f));
 
 if (t_Y>0.008856f) t_fY=exp(log(t_Y)/3.0f);
               else t_fY=((7.787f*t_Y)+(16.0f/116.0f));
 
 if (t_Z>0.008856f) t_fZ=exp(log(t_Z)/3.0f);
               else t_fZ=((7.787f*t_Z)+(16.0f/116.0f));
 
 ml=(short)((116.0f*t_fY)-16.0f);
 ma=(short)(500.0f*(t_fX-t_fY));
 mb=(short)(200.0f*(t_fY-t_fZ));

 ml/=100.0f;
 ma/=127.0f;
 mb/=127.0f;
}
//----------------------------------------------------------------------------------------------------
//преобразовать нормированный Lab в ненормированный (r,g,b)
//----------------------------------------------------------------------------------------------------
void CColorModel::Lab2RGB(float ml,float ma,float mb,float &r,float &g,float &b)
{
 ml*=100.0;
 ma*=127.0;
 mb*=127.0;

 float t_Y=(ml+16.0f)/116.0f;
 float t_X=ma/500.0f+t_Y;
 float t_Z=t_Y-mb/200.0f;
  
 t_X=pow(t_X,3);
 t_Y=pow(t_Y,3);
 t_Z=pow(t_Z,3);
 
 t_X*=0.95047f;
 t_Z*=1.0883f;
   
 float t_R=0.055648f*t_X-0.204043f*t_Y+1.057311f*t_Z;
 float t_G=-0.969256f*t_X+1.875992f*t_Y+0.041556f*t_Z;
 float t_B=3.240479f*t_X-1.537150f*t_Y-0.498535f*t_Z;
 
 if (t_R>0.00304f) t_R=1.055f*pow(t_R,0.41667f)-0.055f;
              else t_R=12.92f*t_R;
 if (t_G>0.00304f) t_G=1.055f*pow(t_G,0.41667f)-0.055f;
              else t_G=12.92f*t_G; 
 if (t_B>0.00304f) t_B=1.055f*pow(t_B,0.41667f)-0.055f; 
              else t_B=12.92f*t_B;
 
 r=t_R*255.0f; 
 g=t_G*255.0f;
 b=t_B*255.0f;

 if (r<0) r=0;
 if (r>255) r=255;
 if (g<0) g=0;
 if (g>255) g=255;
 if (b<0) b=0;
 if (b>255) b=255;
}

//----------------------------------------------------------------------------------------------------
//преобразовать ненормированный (r,g,b) в нормированный YUV
//----------------------------------------------------------------------------------------------------
void CColorModel::RGB2YUV(float r,float g,float b,float &cy,float &cb,float &cr)
{
 cy=0.299f*r+0.587f*g+0.144f*b;
 cb=-0.1687f*r-0.3313f*g+0.5f*b+128.0f;
 cr=0.5f*r-0.4187f*g-0.0813f*b+128.0f;

 cy/=255.0f;
 cb/=255.0f;
 cr/=255.0f; 
}
//----------------------------------------------------------------------------------------------------
//преобразовать нормированный YUV в ненормированный (r,g,b)
//----------------------------------------------------------------------------------------------------
void CColorModel::YUV2RGB(float cy,float cb,float cr,float &r,float &g,float &b)
{
 cy*=255.0f;
 cb*=255.0f;
 cr*=255.0f;

 r=cy+1.402f*(cr-128.0f);
 g=cy-0.3441f*(cb-128.0f)-0.7141f*(cr-128.0f);
 b=cy+1.772f*(cb-128.0f);
}